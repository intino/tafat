dsl Proteo

Concept PeriodicActivity is abstract
	var function:Execute execute is final

Concept Action extends PeriodicActivity is feature
	var function:Action action
	var function:Execute execute = 'self.action()' is final


Concept ConditionalAction extends PeriodicActivity is feature
	var function:Check condition = 'true'
	var function:Action action
	var function:Execute execute = 'if(self.condition())self.action();' is final

Concept EquationSystem is component
	var word:{Euler} solver = Euler
	var double step = 0.1
	Concept Element is feature
		var function:Function calculus
		var double value = 0 is terminal
		sub Stock:{0..1}
		sub Flow:{0..1}

Concept StateChart extends PeriodicActivity is feature
	var function:Execute execute = 'update(self, step)' is final
	var string message = ""
	var function:Message receiveMessage = 'self.message(message);if(self.current() != null) self.current().receiveMessage(message)' is final
	var StateChart current = empty
	Concept State extends StateChart
		Concept Action
			var function:Action action is final
			sub EntryAction
			sub ExitAction
			sub PeriodicAction
	Concept Transition
		var State from is final
		var State to is final
		var function:Action action = ''
		Concept:{1..1} Trigger
			var function:CheckTransition check
			sub Condition >var function:CheckTransition check
			sub TimeBased
				var date when = "" is private
				var function:CheckTransition check = '!self.when().isAfter(getDateTime())' is private
				var function:Action activate is private
				sub Timeout
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.timeout()))'
					var function:Timeout timeout is final
				sub After
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.fixedTime()))'
					var integer:Time fixedTime is final
				sub Rate
					var function:Action activate = 'self.when(getDateTime().plusSeconds(self.unit() / self.times()))'
					var integer:{times} times;var integer unit
			sub Message
				var string expectedMessage
				var function:CheckTransition check = 'self._owner(StateChart.class).message().equals(self.expectedMessage())'

Concept Task is feature
	var word[]:DayOfWeek days = Monday Tuesday Wednesday Thursday Friday Saturday Sunday
	var date scheduledDate = ""
	var function:Check check = '!self.scheduledDate().isAfter(getDateTime())' is final
	var function:Action program = 'self.scheduledDate(scheduledDate(self))' is final
	Concept:{1..1} Start
		var time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Finish
		sub End
			var time end is final
			var integer:Time deviation = 0 minute
		sub Duration
			var integer:Time duration is final
			var integer:Time deviation = 0 minute
	has Task
	has JobAction
	Concept Action
		var function:Action action is final
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept JobAction is feature
	var Job[] job is final
	sub StartJob
	sub RecurrentJob
	sub EndJob

Concept Job is feature
	Concept:{0..1} Start
		var integer:Time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Duration
		var integer:Time duration is final
		var integer:Time deviation = 0 minute
	has Job
	has JobAction
	Concept Action
		var function:Action action
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept TableFunction is feature
	Concept:{0..1} Interpolation
		sub NoneInterpolation
		sub LinearInterpolation
		sub PolynomialInterpolation
		sub SplineInterpolation
		sub StepInterpolation
	Concept:{0..1} Extrapolation
		sub NoneExtrapolation
		sub CustomExtrapolation > var function:Function extrapolationFunction
		sub NearestPointExtrapolation
		sub RepeatSeriesExtrapolation
		sub LinearExtrapolation
		sub PolynomialExtrapolation
		sub SplineExtrapolation
		sub StepExtrapolation
	Concept Data
		var double[] input
		var double output
	var function:Calculate get = '0' is terminal

Concept Map
	var function:Get get = '0' is final
	Concept Entry >var string key;var double value
