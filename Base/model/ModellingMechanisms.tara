dsl Proteo

MetaConcept Periodic is abstract
	var function:Execute execute is final

MetaConcept Action extends Periodic into prototype feature
	var function:Action action
	var function:Execute execute = '$.action()' is final

MetaConcept ConditionalAction extends Periodic into prototype feature
	var function:Check condition = 'true'
	var function:Action action
	var function:Execute execute = '{if($.condition())$.action();}' is final

Concept EquationSystem is feature
	var word:{Euler} solver = Euler
	var double step = 0.1
	Concept Element
		var function:Function elementFunction
		sub Stock
		sub Flow

MetaConcept StateChart extends Periodic into prototype feature
	var function:Execute execute = 'StatechartUpdater.update($, step)' is final
	var string message = ""
	var function:Message receiveMessage = '$.message(message);if($.current() != null) $.current().receiveMessage(message)' is final
	var StateChart current = empty
	MetaConcept State extends StateChart
		Concept Action
			var function:Action action is final
			sub EntryAction
			sub ExitAction
			sub PeriodicAction
	MetaConcept Transition 
		var State from is final
		var State to is final
		var function:Action action = ' '
		Concept:{1..1} Trigger
			var function:CheckTransition check
			sub Condition >var function:CheckTransition check
			sub TimeBased
				var integer:Time timeLeft = 0 minute
				var function:CheckTransition check =
				--
				$.timeLeft($.timeLeft() - advancedTime);
				return $.timeLeft() <= 0;
				--
				var function:Action activate
				sub Timeout
					var function:Action activate = '$.timeLeft($.timeout())'
					var function:Timeout timeout is final
				sub After
					var function:Action activate = '$.timeLeft($.fixedTime())'
					var integer:Time fixedTime is final
				sub Rate
					var function:Action activate = '$.timeLeft($.unit() / $.times())'
					var integer:{times} times;var integer unit
			sub Message
				var string expectedMessage
				var function:CheckTransition check = '$._owner(StateChart.class).message().equals($.expectedMessage())'

MetaConcept Task into prototype feature
	var word[]:DayOfWeek days = Monday Tuesday Wednesday Thursday Friday Saturday Sunday
	var date scheduledDate = ""
	var function:Check check = '!$.scheduledDate().isAfter(tafat.engine.Date.getDateTime())' is final
	var function:Action program = '$.scheduledDate(tafat.engine.helpers.TaskHelper.scheduledDate($))' is final
	Concept:{1..1} Start
		var time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Finish
		sub End
			var time end is final
			var integer:Time deviation = 0 minute
		sub Duration
			var integer:Time duration is final
			var integer:Time deviation = 0 minute
	has Task
	has JobAction
	Concept Action
		var function:Action action is final
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept JobAction is feature
	var Job[] job is final
	sub StartJob
	sub RecurrentJob
	sub EndJob

Concept Job is feature
	Concept:{0..1} Start
		var integer:Time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Duration
		var integer:Time duration is final
		var integer:Time deviation = 0 minute
	has Job
	has JobAction
	Concept Action
		var function:Action action
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept TableFunction is feature
	var PointSet pointSet is final
	Concept:{0..1} Interpolation
		sub NoneInterpolation
		sub LinearInterpolation
		sub PolynomialInterpolation
		sub SplineInterpolation
		sub StepInterpolation
	Concept:{0..1} Extrapolation
		sub NoneExtrapolation
		sub CustomExtrapolation > var function:Function extrapolationFunction

		sub NearestPointExtrapolation

		sub RepeatSeriesExtrapolation

		sub LinearExtrapolation

		sub PolynomialExtrapolation
		sub SplineExtrapolation
		sub StepExtrapolation

Concept PointSet is feature
	Concept Definition is final
		sub Point >var double x is final;var double y is final
		sub:{0..1} X >var double[] values is final
		sub:{0..1} Y >var double[] values is final

Concept Map
	var function:Get get = '0' is final
	Concept Entry >var string key;var double value
