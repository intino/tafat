dsl Proteo

Concept Start is final feature
	var function:Action start is final

Concept PeriodicActivity is abstract
	var function:Execute execute is final private

Concept Action extends PeriodicActivity is feature
	var function:Execute execute = 'self.action()' is final private
	var function:Action action


Concept ConditionalAction extends PeriodicActivity is feature
	var function:Execute execute = 'if(self.condition()) self.action();' is final private
	var boolean condition = true is final reactive
	var function:Action action

Concept SystemDynamic extends PeriodicActivity is feature
	var function:Execute execute = @executeSd is final private
	var object:tafat.engine.DifferentialEquation differentialEquation
	var word:{Euler} solver = Euler
	var double step = 0.1
	var integer timesPerSecond = 'return (int) (1. / self.step());' is private
	var object:org.opensourcephysics.numerics.ODESolver odeSolver = empty is private
	var boolean enabled = true
//	Concept Element is feature
//		var function:Function calculus
//		var double value = 0 is terminal
//		sub Stock:{0..1}
//		sub Flow:{0..1}
//	Concept Param
//		var double value = 0
//		var double pull is reactive

Concept StateChart extends PeriodicActivity is feature
	var function:Execute execute = @updateStateChart is final private
	var function:Message receiveMessage = @receiveMessage is final
	var string message = "" is private
	var StateChart current = @initCurrentState is private
	Concept State extends StateChart
		Concept Action
			var function:Action action is final
			sub EntryAction
			sub ExitAction
			sub PeriodicAction
	Concept Transition
		var State from is final
		var State to is final
		var function:Action action = ''
		Concept:{1..1} Trigger
			var function:CheckTransition check
			sub Condition
			sub TimeBased
				var date when = "" is private
				var function:CheckTransition check = @checkTimeBasedTransition is private
				var function:Action activate is private
				sub Timeout
					var function:Action activate = @activateTimeout
					var integer timeout is reactive final
				sub After
					var function:Action activate = @activateAfter
					var integer:Time fixedTime is final
				sub Rate
					var function:Action activate = @activateRate
					var integer:{times} times
					var integer unit
			sub Message
				var string expectedMessage
				var function:CheckTransition check = @checkMessageTransition

Concept Task is feature
	var word[]:DayOfWeek days = Monday Tuesday Wednesday Thursday Friday Saturday Sunday
	var date scheduledDate = "" is private
	var boolean check = @checkTask is final reactive private
	var function:Action program = @programTask is final private
	Concept:{1..1} Start
		var time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Finish
		sub End
			var time end is final
			var integer:Time deviation = 0 minute
		sub Duration
			var integer:Time duration is final
			var integer:Time deviation = 0 minute
	has Task
	has JobAction
	Concept Action
		var function:Action action is final
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept JobAction is feature
	var Job[] job is final
	sub StartJob
	sub RecurrentJob
	sub EndJob

Concept Job is feature
	Concept:{0..1} Start
		var integer:Time start is final
		var integer:Time deviation = 0 minute
	Concept:{0..1} Duration
		var integer:Time duration is final
		var integer:Time deviation = 0 minute
	has Job
	has JobAction
	Concept Action
		var function:Action action
		sub StartAction
		sub RecurrentAction
		sub EndAction

Concept TableFunction is feature
	Concept:{0..1} Interpolation
		sub NoneInterpolation
		sub LinearInterpolation
		sub PolynomialInterpolation
		sub SplineInterpolation
		sub StepInterpolation
	Concept:{0..1} Extrapolation
		sub NoneExtrapolation
		sub CustomExtrapolation > var function:Function extrapolationFunction
		sub NearestPointExtrapolation
		sub RepeatSeriesExtrapolation
		sub LinearExtrapolation
		sub PolynomialExtrapolation
		sub SplineExtrapolation
		sub StepExtrapolation
	Concept Data
		var double[] input
		var double output
	var function:Calculate get = @getY is terminal
	var object:tafat.engine.tablefunction.TableFunctionProvider provider = empty is private

Concept Map
	var function:Get get = '0' is final
	Concept Entry >var string key;var double value

Concept Rule is feature
	var boolean check is reactive

Concept Fmu extends PeriodicActivity is feature
	// TODO steps higher than 1
	var function:Execute execute = @executeFmu is final private
	var string file is terminal
	var double step = 0.01 is terminal
	var object:org.javafmi.wrapper.Simulation wrapper = empty is private
	Concept Input is feature
		var string fmuVariableName
		sub RealInput
			var function:PushReal push
		sub IntegerInput
			var function:PushInteger push
		sub BooleanInput
			var function:PushBoolean push
		sub StringInput
			var function:PushString push
	Concept Output is feature
		var string fmuVariableName
		sub RealOutput
			var function:PullReal pull
		sub IntegerOutput
			var function:PullInteger pull
		sub BooleanOutput
			var function:PullBoolean pull
		sub StringOutput
			var function:PullString pull